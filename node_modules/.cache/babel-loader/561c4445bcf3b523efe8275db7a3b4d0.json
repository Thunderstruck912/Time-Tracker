{"ast":null,"code":"import { resetTimeAction, resetLittlePauseTimeAction, resetLargePauseTimeAction } from '../store/timeReducer';\nimport { setStatusAction, setLittlePauseAction } from '../store/timerStatus';\nimport { setTotalCountAction } from '../store/totalCountReducer';\nexport const defaultTimerSetting = () => {\n  return dispatch => {\n    dispatch(resetTimeAction());\n    dispatch(setLittlePauseAction({\n      pause: false\n    }));\n    dispatch(setStatusAction({\n      play: true\n    }));\n  };\n};\nexport const timerPauseSetting = (status, totalCount) => {\n  return dispatch => {\n    if ((totalCount + 1) % 3 === 0) {\n      dispatch(setLittlePauseAction({\n        pause: !status.littlePause\n      }));\n      dispatch(resetLargePauseTimeAction());\n      dispatch(setTotalCountAction(1));\n      return;\n    } else dispatch(setLittlePauseAction({\n      pause: !status.littlePause\n    }));\n\n    dispatch(resetLittlePauseTimeAction());\n    dispatch(setTotalCountAction(1));\n    return;\n  };\n};","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/utilites/timerSettings.js"],"names":["resetTimeAction","resetLittlePauseTimeAction","resetLargePauseTimeAction","setStatusAction","setLittlePauseAction","setTotalCountAction","defaultTimerSetting","dispatch","pause","play","timerPauseSetting","status","totalCount","littlePause"],"mappings":"AAAA,SAAQA,eAAR,EAAwBC,0BAAxB,EAAmDC,yBAAnD,QAAoF,sBAApF;AACA,SAAQC,eAAR,EAAwBC,oBAAxB,QAAmD,sBAAnD;AACA,SAAQC,mBAAR,QAAkC,4BAAlC;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAI;AACrC,SAAQC,QAAD,IAAY;AACjBA,IAAAA,QAAQ,CAACP,eAAe,EAAhB,CAAR;AACAO,IAAAA,QAAQ,CAACH,oBAAoB,CAAC;AAACI,MAAAA,KAAK,EAAC;AAAP,KAAD,CAArB,CAAR;AACAD,IAAAA,QAAQ,CAACJ,eAAe,CAAC;AAACM,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAhB,CAAR;AACD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMC,iBAAiB,GAAC,CAACC,MAAD,EAAQC,UAAR,KAAqB;AAClD,SAAQL,QAAD,IAAY;AACjB,QAAG,CAACK,UAAU,GAAC,CAAZ,IAAe,CAAf,KAAmB,CAAtB,EAAwB;AACtBL,MAAAA,QAAQ,CAACH,oBAAoB,CAAC;AAACI,QAAAA,KAAK,EAAC,CAACG,MAAM,CAACE;AAAf,OAAD,CAArB,CAAR;AACAN,MAAAA,QAAQ,CAACL,yBAAyB,EAA1B,CAAR;AACAK,MAAAA,QAAQ,CAACF,mBAAmB,CAAC,CAAD,CAApB,CAAR;AACA;AACD,KALD,MAMEE,QAAQ,CAACH,oBAAoB,CAAC;AAACI,MAAAA,KAAK,EAAC,CAACG,MAAM,CAACE;AAAf,KAAD,CAArB,CAAR;;AACAN,IAAAA,QAAQ,CAACN,0BAA0B,EAA3B,CAAR;AACAM,IAAAA,QAAQ,CAACF,mBAAmB,CAAC,CAAD,CAApB,CAAR;AACA;AACH,GAXD;AAYE,CAbG","sourcesContent":["import {resetTimeAction,resetLittlePauseTimeAction,resetLargePauseTimeAction } from '../store/timeReducer';\r\nimport {setStatusAction,setLittlePauseAction} from '../store/timerStatus'\r\nimport {setTotalCountAction} from '../store/totalCountReducer'\r\n\r\nexport const defaultTimerSetting = ()=>{\r\n  return (dispatch)=>{\r\n    dispatch(resetTimeAction())\r\n    dispatch(setLittlePauseAction({pause:false}))\r\n    dispatch(setStatusAction({play:true}))\r\n  }\r\n}\r\n\r\nexport const timerPauseSetting=(status,totalCount)=>{\r\n  return (dispatch)=>{\r\n    if((totalCount+1)%3===0){\r\n      dispatch(setLittlePauseAction({pause:!status.littlePause}))\r\n      dispatch(resetLargePauseTimeAction())\r\n      dispatch(setTotalCountAction(1))    \r\n      return\r\n    }else\r\n      dispatch(setLittlePauseAction({pause:!status.littlePause}))\r\n      dispatch(resetLittlePauseTimeAction())\r\n      dispatch(setTotalCountAction(1))\r\n      return\r\n  }\r\n   }\r\n"]},"metadata":{},"sourceType":"module"}