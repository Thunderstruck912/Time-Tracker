{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bouku\\\\Desktop\\\\Time Tracker\\\\time-tracker\\\\src\\\\components\\\\ResetCount\\\\ResetCount.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport classes from \"./ResetCount.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { resetTimeAction, resetLittlePauseTimeAction, resetLargePauseTimeAction } from \"../../store/timeReducer\";\nimport { setStatusAction } from \"../../store/timerStatus\";\nimport { defaultTimerSetting, timerPauseSetting } from \"../../utilites/timerSettings\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResetCount = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const status = useSelector(state => state.status.littlePause);\n  const totalCount = useSelector(state => state.totalCount.totalCount); // const resetRound = () => {\n  // \tdispatch(setStatusAction(false));\n  // \tif (!status.littlePause) {\n  // \t\tdispatch(resetTimeAction());\n  // \t}\n  //   status.littlePause&&((totalCount + 1) % 3 === 0)?\n  // \tdispatch(resetLargePauseTimeAction())\n  //   :2\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.skip_wrapper,\n    children: !status ? /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: resetRound,\n      children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0442\\u0430\\u0439\\u043C\\u0435\\u0440\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: resetRound,\n      children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u043F\\u0430\\u0443\\u0437\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ResetCount, \"QZXoui/w/p+StmQCMUmxgjwKShQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ResetCount;\nexport default ResetCount;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetCount\");","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/components/ResetCount/ResetCount.jsx"],"names":["React","classes","useSelector","useDispatch","resetTimeAction","resetLittlePauseTimeAction","resetLargePauseTimeAction","setStatusAction","defaultTimerSetting","timerPauseSetting","ResetCount","dispatch","status","state","littlePause","totalCount","skip_wrapper","resetRound"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,eAAR,EAAwBC,0BAAxB,EAAmDC,yBAAnD,QAAmF,yBAAnF;AACA,SAAQC,eAAR,QAA8B,yBAA9B;AACA,SACCC,mBADD,EAECC,iBAFD,QAGO,8BAHP;;;AAKA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACxB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,MAAM,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACD,MAAN,CAAaE,WAAzB,CAA1B;AACC,QAAMC,UAAU,GAAGb,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACE,UAAN,CAAiBA,UAA7B,CAA9B,CAHuB,CAKxB;AACA;AACA;AACA;AACA;AACC;AACA;AACA;AACA;AACD;;AACA,sBACC;AAAK,IAAA,SAAS,EAAEd,OAAO,CAACe,YAAxB;AAAA,cACE,CAACJ,MAAD,gBACA;AAAM,MAAA,OAAO,EAAEK,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,gBAGA;AAAO,MAAA,OAAO,EAAEA,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,UADD;AASA,CAxBD;;GAAMP,U;UACYP,W,EACFD,W,EACKA,W;;;KAHfQ,U;AA0BN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\r\nimport classes from \"./ResetCount.module.css\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {resetTimeAction,resetLittlePauseTimeAction,resetLargePauseTimeAction} from \"../../store/timeReducer\";\r\nimport {setStatusAction} from \"../../store/timerStatus\";\r\nimport {\r\n\tdefaultTimerSetting,\r\n\ttimerPauseSetting,\r\n} from \"../../utilites/timerSettings\";\r\n\r\nconst ResetCount = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst status = useSelector((state) => state.status.littlePause);\r\n  const totalCount = useSelector((state) => state.totalCount.totalCount);\r\n\r\n\t// const resetRound = () => {\r\n\t// \tdispatch(setStatusAction(false));\r\n\t// \tif (!status.littlePause) {\r\n\t// \t\tdispatch(resetTimeAction());\r\n\t// \t}\r\n  //   status.littlePause&&((totalCount + 1) % 3 === 0)?\r\n  // \tdispatch(resetLargePauseTimeAction())\r\n  //   :2\r\n  //   }\r\n\t// };\r\n\treturn (\r\n\t\t<div className={classes.skip_wrapper}>\r\n\t\t\t{!status ? (\r\n\t\t\t\t<span onClick={resetRound}>Обновить таймер</span>\r\n\t\t\t) : (\r\n\t\t\t\t<span  onClick={resetRound}>Обновить паузу</span>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ResetCount;\r\n"]},"metadata":{},"sourceType":"module"}