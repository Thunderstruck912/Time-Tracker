{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bouku\\\\Desktop\\\\Time Tracker\\\\time-tracker\\\\src\\\\components\\\\Timer\\\\Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setTimeAction } from '../../store/timeReducer';\nimport { setPauseAction, SetPlayAction } from '../../store/timerStatus';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Timer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const time = useSelector(state => state.time);\n  const status = useSelector(state => state.status);\n  const [interv, setInterv] = useState(null);\n  let updateM = time.minutes,\n      updateS = time.seconds;\n  console.log(status);\n\n  const tracer = () => {\n    setTracer();\n    setInterval(setTracer, 100);\n  };\n\n  const setTracer = () => {\n    if (updateS === 0) {\n      updateS = 60;\n      updateM--;\n    }\n\n    updateS--;\n    return dispatch(setTimeAction({\n      value1: updateM,\n      value2: updateS\n    }));\n  }; // const timer=()=>{\n  //   setActive(!active)\n  //   run()\n  //   if(!active){\n  //     setInterv(setInterval(run,1))\n  //     clearInterval(interv)\n  //   } else {\n  //     clearInterval(interv)\n  //   }\n  // } \n  // const run = ()=>{\n  //   if(updateMin===0&&updateSec===1) {\n  //     setTotalCount(totalCount+1)\n  //     setTime(pause)\n  //     setActive(false)\n  //     return        \n  //   } \n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: time.minutes >= 10 ? time.minutes : '0' + time.minutes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this), \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: time.seconds >= 10 ? time.seconds : '0' + time.seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: tracer,\n      value: \"\\u0437\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0442\\u0430\\u0439\\u043C\\u0435\\u0440\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Timer, \"r88Z6iqhtklgR1Pz07oho0qAlp0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/components/Timer/Timer.jsx"],"names":["React","useState","useSelector","useDispatch","setTimeAction","setPauseAction","SetPlayAction","Timer","dispatch","time","state","status","interv","setInterv","updateM","minutes","updateS","seconds","console","log","tracer","setTracer","setInterval","value1","value2"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAAQC,cAAR,EAAuBC,aAAvB,QAA2C,yBAA3C;;;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,QAAQ,GAACL,WAAW,EAA1B;AACA,QAAMM,IAAI,GAACP,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACD,IAAhB,CAAtB;AACA,QAAME,MAAM,GAACT,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACC,MAAhB,CAAxB;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AAEA,MAAIa,OAAO,GAAEL,IAAI,CAACM,OAAlB;AAAA,MAA2BC,OAAO,GAACP,IAAI,CAACQ,OAAxC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;;AAEA,QAAMS,MAAM,GAAC,MAAI;AACfC,IAAAA,SAAS;AACTC,IAAAA,WAAW,CAACD,SAAD,EAAW,GAAX,CAAX;AACD,GAHD;;AAKA,QAAMA,SAAS,GAAC,MAAI;AAClB,QAAGL,OAAO,KAAG,CAAb,EAAe;AACbA,MAAAA,OAAO,GAAC,EAAR;AACAF,MAAAA,OAAO;AACR;;AACDE,IAAAA,OAAO;AACP,WAAOR,QAAQ,CAACJ,aAAa,CAAC;AAACmB,MAAAA,MAAM,EAACT,OAAR;AAAgBU,MAAAA,MAAM,EAACR;AAAvB,KAAD,CAAd,CAAf;AACD,GAPD,CAdkB,CAyBlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACE;AAAA,4BACF;AAAA,8BACE;AAAA,kBAAOP,IAAI,CAACM,OAAL,IAAc,EAAd,GAAiBN,IAAI,CAACM,OAAtB,GAA8B,MAAIN,IAAI,CAACM;AAA9C;AAAA;AAAA;AAAA;AAAA,cADF,oBAEE;AAAA,kBAAON,IAAI,CAACQ,OAAL,IAAc,EAAd,GAAiBR,IAAI,CAACQ,OAAtB,GAA8B,MAAIR,IAAI,CAACQ;AAA9C;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADE,eAKF;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAEG,MAA9B;AAAsC,MAAA,KAAK,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA,YALE;AAAA,kBADF;AAQE,CAnDJ;;GAAMb,K;UACWJ,W,EACJD,W,EACEA,W;;;KAHTK,K;AAqDN,eAAeA,KAAf","sourcesContent":["import React,{useState} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport { setTimeAction } from '../../store/timeReducer';\r\nimport {setPauseAction,SetPlayAction} from '../../store/timerStatus'\r\n\r\n\r\nconst Timer = () => {\r\n  const dispatch=useDispatch()\r\n  const time=useSelector((state)=>state.time)\r\n  const status=useSelector((state)=>state.status)\r\n  const [interv,setInterv] =useState(null)\r\n\r\n  let updateM= time.minutes, updateS=time.seconds  \r\n  console.log(status)\r\n \r\n  const tracer=()=>{\r\n    setTracer()\r\n    setInterval(setTracer,100)\r\n  }\r\n\r\n  const setTracer=()=>{\r\n    if(updateS===0){\r\n      updateS=60\r\n      updateM--\r\n    }\r\n    updateS--\r\n    return dispatch(setTimeAction({value1:updateM,value2:updateS}))\r\n  }\r\n\r\n\r\n\r\n  // const timer=()=>{\r\n  //   setActive(!active)\r\n  //   run()\r\n  //   if(!active){\r\n  //     setInterv(setInterval(run,1))\r\n  //     clearInterval(interv)\r\n  //   } else {\r\n  //     clearInterval(interv)\r\n  //   }\r\n  // } \r\n\r\n  // const run = ()=>{\r\n  //   if(updateMin===0&&updateSec===1) {\r\n  //     setTotalCount(totalCount+1)\r\n  //     setTime(pause)\r\n  //     setActive(false)\r\n  //     return        \r\n  //   } \r\n  return (\r\n    <>\r\n  <div>\r\n    <span>{time.minutes>=10?time.minutes:'0'+time.minutes}</span>:\r\n    <span>{time.seconds>=10?time.seconds:'0'+time.seconds}</span>\r\n  </div>\r\n  <input type=\"button\" onClick={tracer} value='запустить таймер'/>\r\n  </>\r\n  )};\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}