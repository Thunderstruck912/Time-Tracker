{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bouku\\\\Desktop\\\\Time Tracker\\\\time-tracker\\\\src\\\\components\\\\Timer\\\\Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setTimeAction } from \"../../store/timeReducer\";\nimport { setStatusAction, setLittlePauseAction } from \"../../store/timerStatus\";\nimport { defaultTimerSetting, timerPauseSetting } from \"../../utilites/timerSettings\";\nimport { useLocalStorage } from \"../../hooks/useLocalStorage\";\nimport InputTimer from \"../../UI/InputTimer/InputTimer\";\nimport TimerSpan from \"./TimerSpan/TimerSpan\";\nimport TimerImg from \"./TimerImg/TimerImg\";\nimport classes from \"../Timer/Timer.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firstTimeStatus = \"DATA:FIRST_TIME_STATUS\";\n\nconst Timer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const timer = useSelector(state => state.time.timer);\n  const status = useSelector(state => state.status);\n  const totalCount = useSelector(state => state.totalCount.totalCount);\n  const [firstRun, setFirstRun] = useState(localStorage.getItem(firstTimeStatus) || true);\n  useLocalStorage(\"SETTING:LITTLE_PAUSE_STATUS\", status.littlePause, setLittlePauseAction);\n  useLocalStorage(\"DATA:TIMER\", timer, setTimeAction);\n  let updateM = timer.minutes,\n      updateS = timer.seconds;\n  useEffect(() => {\n    localStorage.setItem(firstTimeStatus, firstRun);\n  }, [firstRun]); // AUTO PLAY AFTER WORK //\n\n  useEffect(() => {\n    if (status.littlePause && status.reloadStatus) dispatch(setStatusAction({\n      play: true\n    }));\n  }, [status.littlePause]);\n\n  const setRun = () => setFirstRun(false); //  CORE TIMER // DONT TOUCH !!! //\n\n\n  useEffect(() => {\n    if (status.play) {\n      if (firstRun) setFirstRun(false);\n      const intervalId = setInterval(() => {\n        if (updateM === 0 && updateS === 1) {\n          dispatch(setStatusAction({\n            play: !status.play\n          }));\n\n          if (!status.littlePause) {\n            dispatch(timerPauseSetting({\n              status,\n              totalCount\n            }));\n            return clearInterval(intervalId);\n          } else dispatch(defaultTimerSetting());\n\n          return clearInterval(intervalId);\n        }\n\n        if (updateS === 0) {\n          updateS = 60;\n          updateM--;\n        }\n\n        updateS--;\n        dispatch(setTimeAction({\n          minutes: updateM,\n          seconds: updateS\n        }));\n      }, 1000);\n      return () => clearInterval(intervalId);\n    }\n  }, [status.play, status.littlePause]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.timer,\n    children: [/*#__PURE__*/_jsxDEV(TimerSpan, {\n      timer: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TimerImg, {\n      timer: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(InputTimer, {\n      status: status,\n      setFirstRun: setRun\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Timer, \"44oGpg4iNGdKHduVOsswtnfVNO4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useLocalStorage, useLocalStorage];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/components/Timer/Timer.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","setTimeAction","setStatusAction","setLittlePauseAction","defaultTimerSetting","timerPauseSetting","useLocalStorage","InputTimer","TimerSpan","TimerImg","classes","firstTimeStatus","Timer","dispatch","timer","state","time","status","totalCount","firstRun","setFirstRun","localStorage","getItem","littlePause","updateM","minutes","updateS","seconds","setItem","reloadStatus","play","setRun","intervalId","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {setTimeAction} from \"../../store/timeReducer\";\r\nimport {setStatusAction, setLittlePauseAction} from \"../../store/timerStatus\";\r\nimport {\r\n\tdefaultTimerSetting,\r\n\ttimerPauseSetting,\r\n} from \"../../utilites/timerSettings\";\r\nimport {useLocalStorage} from \"../../hooks/useLocalStorage\";\r\nimport InputTimer from \"../../UI/InputTimer/InputTimer\";\r\nimport TimerSpan from \"./TimerSpan/TimerSpan\";\r\nimport TimerImg from \"./TimerImg/TimerImg\";\r\nimport classes from \"../Timer/Timer.module.css\";\r\n\r\nconst firstTimeStatus = \"DATA:FIRST_TIME_STATUS\";\r\n\r\nconst Timer = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst timer = useSelector((state) => state.time.timer);\r\n\tconst status = useSelector((state) => state.status);\r\n\tconst totalCount = useSelector((state) => state.totalCount.totalCount);\r\n\tconst [firstRun, setFirstRun] = useState(\r\n\t\tlocalStorage.getItem(firstTimeStatus) || true,\r\n\t);\r\n\r\n\tuseLocalStorage(\r\n\t\t\"SETTING:LITTLE_PAUSE_STATUS\",\r\n\t\tstatus.littlePause,\r\n\t\tsetLittlePauseAction,\r\n\t);\r\n\r\n\tuseLocalStorage(\"DATA:TIMER\", timer, setTimeAction);\r\n\r\n\tlet updateM = timer.minutes,\r\n\t\tupdateS = timer.seconds;\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(firstTimeStatus, firstRun);\r\n\t}, [firstRun]);\r\n\r\n\r\n\t// AUTO PLAY AFTER WORK //\r\n\r\n\tuseEffect(() => {\r\n\t\tif (status.littlePause && status.reloadStatus)\r\n\t\t\tdispatch(setStatusAction({play: true}));\r\n\t}, [status.littlePause]);\r\n\r\n\tconst setRun = () => setFirstRun(false);\r\n\r\n\t//  CORE TIMER // DONT TOUCH !!! //\r\n\r\n\tuseEffect(() => {\r\n\t\tif (status.play) {\r\n\t\t\tif (firstRun) setFirstRun(false);\r\n\t\t\tconst intervalId = setInterval(() => {\r\n\t\t\t\tif (updateM === 0 && updateS === 1) {\r\n\t\t\t\t\tdispatch(setStatusAction({play: !status.play}));\r\n\t\t\t\t\tif (!status.littlePause) {\r\n\t\t\t\t\t\tdispatch(timerPauseSetting({status, totalCount}));\r\n\t\t\t\t\t\treturn clearInterval(intervalId);\r\n\t\t\t\t\t} else dispatch(defaultTimerSetting());\r\n\t\t\t\t\treturn clearInterval(intervalId);\r\n\t\t\t\t}\r\n\t\t\t\tif (updateS === 0) {\r\n\t\t\t\t\tupdateS = 60;\r\n\t\t\t\t\tupdateM--;\r\n\t\t\t\t}\r\n\t\t\t\tupdateS--;\r\n\t\t\t\tdispatch(setTimeAction({minutes: updateM, seconds: updateS}));\r\n\t\t\t}, 1000);\r\n\t\t\treturn () => clearInterval(intervalId);\r\n\t\t}\r\n\t}, [status.play, status.littlePause]);\r\n\r\n\treturn (\r\n\t\t<div className={classes.timer}>\r\n\t\t\t<TimerSpan timer={timer} />\r\n\t\t\t<TimerImg timer={timer} />\r\n\t\t\t<InputTimer status={status} setFirstRun={setRun} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}