{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bouku\\\\Desktop\\\\Time Tracker\\\\time-tracker\\\\src\\\\components\\\\Timer\\\\Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setTimeAction, resetTimeAction } from \"../../store/timeReducer\";\nimport { setStatusAction, setLittlePauseAction, setFirstRunAction } from \"../../store/timerStatus\";\nimport { defaultTimerSetting, timerPauseSetting } from \"../../utilites/timerSettings\";\nimport { useLocalStorage } from \"../../hooks/useLocalStorage\";\nimport InputTimer from \"./InputTimer/InputTimer\";\nimport TimerSpan from \"./TimerSpan/TimerSpan\";\nimport TimerImg from \"./TimerImg/TimerImg\";\nimport classes from \"../Timer/Timer.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firstTimeStatus = \"DATA:FIRST_TIME_STATUS\";\nconst timerTime = \"DATA:TIMER\";\n\nconst Timer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const timer = useSelector(state => state.time.timer);\n  const status = useSelector(state => state.status);\n  const totalCount = useSelector(state => state.totalCount.totalCount); // const [firstRun, setFirstRun] = useState(\n  // \tlocalStorage.getItem(firstTimeStatus) || true,\n  // );\n\n  useLocalStorage(\"SETTING:LITTLE_PAUSE_STATUS\", status.littlePause, setLittlePauseAction);\n  useLocalStorage(\"DATA:FIRST_RUN_STATUS\", status.firstRunStatus, setFirstRunAction);\n  let updateM = timer.minutes,\n      updateS = timer.seconds; // useEffect(() => {\n  // \tlocalStorage.setItem(firstTimeStatus, status.firstTimeStatus);\n  // }, [status.firstTimeStatus]);\n  // const setRun = () => setFirstRun(false);\n\n  useEffect(() => {\n    if (!status.firstTimeStatus) {\n      if (timer !== undefined && timer.minutes !== 0) {\n        localStorage.setItem(timerTime, JSON.stringify(timer));\n      }\n    }\n  }, [timer]);\n  useEffect(() => {\n    if (localStorage.getItem(timerTime)) {\n      let t = JSON.parse(localStorage.getItem(timerTime));\n      dispatch(setTimeAction({\n        minutes: t.minutes,\n        seconds: t.seconds\n      }));\n    } else {\n      dispatch(resetTimeAction());\n    }\n  }, []); // AUTO PLAY AFTER ROUND //\n\n  useEffect(() => {\n    if (status.littlePause && status.reloadStatus) dispatch(setStatusAction({\n      play: true\n    }));\n  }, [status.littlePause]); // TIMER CORE // DONT TOUCH !!! //\n\n  useEffect(() => {\n    if (status.play) {\n      // if (firstRun) setFirstRun(false);\n      const intervalId = setInterval(() => {\n        if (updateM === 0 && updateS === 1) {\n          dispatch(setStatusAction({\n            play: !status.play\n          }));\n\n          if (!status.littlePause) {\n            dispatch(timerPauseSetting({\n              status,\n              totalCount\n            }));\n            return clearInterval(intervalId);\n          } else dispatch(defaultTimerSetting());\n\n          return clearInterval(intervalId);\n        }\n\n        if (updateS === 0) {\n          updateS = 60;\n          updateM--;\n        }\n\n        updateS--;\n        dispatch(setTimeAction({\n          minutes: updateM,\n          seconds: updateS\n        }));\n      }, 1000);\n      return () => clearInterval(intervalId);\n    }\n  }, [status.play, status.littlePause]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.timer,\n    children: [/*#__PURE__*/_jsxDEV(TimerSpan, {\n      timer: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TimerImg, {\n      timer: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(InputTimer, {\n      status: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Timer, \"KFb9GjuYADb/cyNtLLGhyT+btWo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useLocalStorage, useLocalStorage];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/components/Timer/Timer.jsx"],"names":["React","useEffect","useSelector","useDispatch","setTimeAction","resetTimeAction","setStatusAction","setLittlePauseAction","setFirstRunAction","defaultTimerSetting","timerPauseSetting","useLocalStorage","InputTimer","TimerSpan","TimerImg","classes","firstTimeStatus","timerTime","Timer","dispatch","timer","state","time","status","totalCount","littlePause","firstRunStatus","updateM","minutes","updateS","seconds","undefined","localStorage","setItem","JSON","stringify","getItem","t","parse","reloadStatus","play","intervalId","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {setTimeAction, resetTimeAction} from \"../../store/timeReducer\";\r\nimport {\r\n\tsetStatusAction,\r\n\tsetLittlePauseAction,\r\n\tsetFirstRunAction,\r\n} from \"../../store/timerStatus\";\r\nimport {\r\n\tdefaultTimerSetting,\r\n\ttimerPauseSetting,\r\n} from \"../../utilites/timerSettings\";\r\nimport {useLocalStorage} from \"../../hooks/useLocalStorage\";\r\nimport InputTimer from \"./InputTimer/InputTimer\";\r\nimport TimerSpan from \"./TimerSpan/TimerSpan\";\r\nimport TimerImg from \"./TimerImg/TimerImg\";\r\nimport classes from \"../Timer/Timer.module.css\";\r\n\r\nconst firstTimeStatus = \"DATA:FIRST_TIME_STATUS\";\r\nconst timerTime = \"DATA:TIMER\";\r\n\r\nconst Timer = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst timer = useSelector((state) => state.time.timer);\r\n\tconst status = useSelector((state) => state.status);\r\n\tconst totalCount = useSelector((state) => state.totalCount.totalCount);\r\n\t// const [firstRun, setFirstRun] = useState(\r\n\t// \tlocalStorage.getItem(firstTimeStatus) || true,\r\n\t// );\r\n\tuseLocalStorage(\r\n\t\t\"SETTING:LITTLE_PAUSE_STATUS\",\r\n\t\tstatus.littlePause,\r\n\t\tsetLittlePauseAction,\r\n\t);\r\n\r\n\tuseLocalStorage(\r\n\t\t\"DATA:FIRST_RUN_STATUS\",\r\n\t\tstatus.firstRunStatus,\r\n\t\tsetFirstRunAction,\r\n\t);\r\n\r\n\tlet updateM = timer.minutes,\r\n\t\tupdateS = timer.seconds;\r\n\r\n\t// useEffect(() => {\r\n\t// \tlocalStorage.setItem(firstTimeStatus, status.firstTimeStatus);\r\n\t// }, [status.firstTimeStatus]);\r\n\r\n\t// const setRun = () => setFirstRun(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!status.firstTimeStatus) {\r\n\t\t\tif (timer !== undefined && timer.minutes !== 0) {\r\n\t\t\t\tlocalStorage.setItem(timerTime, JSON.stringify(timer));\r\n\t\t\t}\r\n\t\t}\r\n\t}, [timer]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (localStorage.getItem(timerTime)) {\r\n\t\t\tlet t = JSON.parse(localStorage.getItem(timerTime));\r\n\t\t\tdispatch(setTimeAction({minutes: t.minutes, seconds: t.seconds}));\r\n\t\t} else {\r\n\t\t\tdispatch(resetTimeAction());\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// AUTO PLAY AFTER ROUND //\r\n\r\n\tuseEffect(() => {\r\n\t\tif (status.littlePause && status.reloadStatus)\r\n\t\t\tdispatch(setStatusAction({play: true}));\r\n\t}, [status.littlePause]);\r\n\r\n\t// TIMER CORE // DONT TOUCH !!! //\r\n\r\n\tuseEffect(() => {\r\n\t\tif (status.play) {\r\n\t\t\t// if (firstRun) setFirstRun(false);\r\n\t\t\tconst intervalId = setInterval(() => {\r\n\t\t\t\tif (updateM === 0 && updateS === 1) {\r\n\t\t\t\t\tdispatch(setStatusAction({play: !status.play}));\r\n\t\t\t\t\tif (!status.littlePause) {\r\n\t\t\t\t\t\tdispatch(timerPauseSetting({status, totalCount}));\r\n\t\t\t\t\t\treturn clearInterval(intervalId);\r\n\t\t\t\t\t} else dispatch(defaultTimerSetting());\r\n\t\t\t\t\treturn clearInterval(intervalId);\r\n\t\t\t\t}\r\n\t\t\t\tif (updateS === 0) {\r\n\t\t\t\t\tupdateS = 60;\r\n\t\t\t\t\tupdateM--;\r\n\t\t\t\t}\r\n\t\t\t\tupdateS--;\r\n\t\t\t\tdispatch(setTimeAction({minutes: updateM, seconds: updateS}));\r\n\t\t\t}, 1000);\r\n\t\t\treturn () => clearInterval(intervalId);\r\n\t\t}\r\n\t}, [status.play, status.littlePause]);\r\n\r\n\treturn (\r\n\t\t<div className={classes.timer}>\r\n\t\t\t<TimerSpan timer={timer} />\r\n\t\t\t<TimerImg timer={timer} />\r\n\t\t\t<InputTimer status={status} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}