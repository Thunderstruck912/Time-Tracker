{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setTimeAction, resetTimeAction, resetLittlePauseTimeAction, resetLargePauseTimeAction } from '../store/timeReducer';\nimport { setStatusAction, setLittlePauseAction } from '../store/timerStatus';\nimport { setTotalCountAction } from '../store/totalCountReducer';\nexport const defaultTimerSetting = () => {\n  return dispatch => {\n    dispatch(resetTimeAction());\n    dispatch(setLittlePauseAction({\n      pause: false\n    }));\n    dispatch(setStatusAction({\n      play: true\n    }));\n  };\n};\nexport const timerPauseSetting = () => {\n  var _s = $RefreshSig$();\n\n  return _s(dispatch => {\n    _s();\n\n    const status = useSelector(state => state.status);\n    const totalCount = useSelector(state => state.totalCount.totalCount);\n\n    if ((totalCount + 1) % 3 === 0) {\n      dispatch(setLittlePauseAction({\n        pause: !status.littlePause\n      }));\n      dispatch(resetLargePauseTimeAction());\n      dispatch(setTotalCountAction(1));\n      return;\n    } else dispatch(setLittlePauseAction({\n      pause: !status.littlePause\n    }));\n\n    dispatch(resetLittlePauseTimeAction());\n    dispatch(setTotalCountAction(1));\n    return;\n  }, \"+hhkOZRhiQ9RZ/dc0Q5itUB+JkE=\", false, function () {\n    return [useSelector, useSelector];\n  });\n};","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/utilites/timerSettings.js"],"names":["React","useState","useEffect","useDispatch","useSelector","setTimeAction","resetTimeAction","resetLittlePauseTimeAction","resetLargePauseTimeAction","setStatusAction","setLittlePauseAction","setTotalCountAction","defaultTimerSetting","dispatch","pause","play","timerPauseSetting","status","state","totalCount","littlePause"],"mappings":"AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAwCC,0BAAxC,EAAmEC,yBAAnE,QAAoG,sBAApG;AACA,SAAQC,eAAR,EAAwBC,oBAAxB,QAAmD,sBAAnD;AACA,SAAQC,mBAAR,QAAkC,4BAAlC;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAI;AACrC,SAAQC,QAAD,IAAY;AACjBA,IAAAA,QAAQ,CAACP,eAAe,EAAhB,CAAR;AACAO,IAAAA,QAAQ,CAACH,oBAAoB,CAAC;AAACI,MAAAA,KAAK,EAAC;AAAP,KAAD,CAArB,CAAR;AACAD,IAAAA,QAAQ,CAACJ,eAAe,CAAC;AAACM,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAhB,CAAR;AACD,GAJD;AAKD,CANM;AASP,OAAO,MAAMC,iBAAiB,GAAC,MAAI;AAAA;;AACjC,YAAQH,QAAD,IAAY;AAAA;;AACjB,UAAMI,MAAM,GAACb,WAAW,CAAEc,KAAD,IAASA,KAAK,CAACD,MAAhB,CAAxB;AACA,UAAME,UAAU,GAACf,WAAW,CAAEc,KAAD,IAASA,KAAK,CAACC,UAAN,CAAiBA,UAA3B,CAA5B;;AAEA,QAAG,CAACA,UAAU,GAAC,CAAZ,IAAe,CAAf,KAAmB,CAAtB,EAAwB;AACtBN,MAAAA,QAAQ,CAACH,oBAAoB,CAAC;AAACI,QAAAA,KAAK,EAAC,CAACG,MAAM,CAACG;AAAf,OAAD,CAArB,CAAR;AACAP,MAAAA,QAAQ,CAACL,yBAAyB,EAA1B,CAAR;AACAK,MAAAA,QAAQ,CAACF,mBAAmB,CAAC,CAAD,CAApB,CAAR;AACA;AACD,KALD,MAMEE,QAAQ,CAACH,oBAAoB,CAAC;AAACI,MAAAA,KAAK,EAAC,CAACG,MAAM,CAACG;AAAf,KAAD,CAArB,CAAR;;AACAP,IAAAA,QAAQ,CAACN,0BAA0B,EAA3B,CAAR;AACAM,IAAAA,QAAQ,CAACF,mBAAmB,CAAC,CAAD,CAApB,CAAR;AACA;AACH,GAdD;AAAA,YACeP,WADf,EAEmBA,WAFnB;AAAA;AAeE,CAhBG","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport { setTimeAction, resetTimeAction,resetLittlePauseTimeAction,resetLargePauseTimeAction } from '../store/timeReducer';\r\nimport {setStatusAction,setLittlePauseAction} from '../store/timerStatus'\r\nimport {setTotalCountAction} from '../store/totalCountReducer'\r\n\r\nexport const defaultTimerSetting = ()=>{\r\n  return (dispatch)=>{\r\n    dispatch(resetTimeAction())\r\n    dispatch(setLittlePauseAction({pause:false}))\r\n    dispatch(setStatusAction({play:true}))\r\n  }\r\n}\r\n\r\n\r\nexport const timerPauseSetting=()=>{\r\n  return (dispatch)=>{\r\n    const status=useSelector((state)=>state.status)\r\n    const totalCount=useSelector((state)=>state.totalCount.totalCount)\r\n    \r\n    if((totalCount+1)%3===0){\r\n      dispatch(setLittlePauseAction({pause:!status.littlePause}))\r\n      dispatch(resetLargePauseTimeAction())\r\n      dispatch(setTotalCountAction(1))    \r\n      return\r\n    }else\r\n      dispatch(setLittlePauseAction({pause:!status.littlePause}))\r\n      dispatch(resetLittlePauseTimeAction())\r\n      dispatch(setTotalCountAction(1))\r\n      return\r\n  }\r\n   }\r\n"]},"metadata":{},"sourceType":"module"}