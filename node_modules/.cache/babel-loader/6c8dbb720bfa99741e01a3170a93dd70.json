{"ast":null,"code":"import { resetTimeAction, resetLittlePauseTimeAction, resetLargePauseTimeAction } from \"../store/timeReducer\";\nimport { setStatusAction, setLittlePauseAction, setReloadStatusAction } from \"../store/timerStatus\";\nimport { addTotalCountAction } from \"../store/totalCountReducer\";\nexport const defaultTimerSetting = () => {\n  return dispatch => {\n    dispatch(setReloadStatusAction(true));\n    dispatch(resetTimeAction());\n    dispatch(setLittlePauseAction(false));\n    dispatch(setStatusAction({\n      play: true\n    }));\n  };\n};\nexport const timerPauseSetting = _ref => {\n  let {\n    status,\n    count\n  } = _ref;\n  return dispatch => {\n    dispatch(setReloadStatusAction(true));\n\n    if ((count.totalCount + 1) % count.roundCount === 0) {\n      dispatch(setLittlePauseAction(!status.littlePause));\n      dispatch(resetLargePauseTimeAction());\n      dispatch(addTotalCountAction(1));\n      return;\n    } else dispatch(setLittlePauseAction(!status.littlePause));\n\n    dispatch(resetLittlePauseTimeAction());\n    dispatch(addTotalCountAction(1));\n    return;\n  };\n};\nexport const resetRound = () => {\n  return dispatch => {\n    dispatch(setStatusAction({\n      play: false\n    }));\n    dispatch(resetTimeAction());\n  };\n};\nexport const resetPause = _ref2 => {\n  let {\n    count\n  } = _ref2;\n  return dispatch => {\n    if (count.totalCount % count.roundCount === 0) {\n      dispatch(resetLargePauseTimeAction());\n    } else dispatch(resetLittlePauseTimeAction());\n  };\n};","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/utilites/timerSettings.js"],"names":["resetTimeAction","resetLittlePauseTimeAction","resetLargePauseTimeAction","setStatusAction","setLittlePauseAction","setReloadStatusAction","addTotalCountAction","defaultTimerSetting","dispatch","play","timerPauseSetting","status","count","totalCount","roundCount","littlePause","resetRound","resetPause"],"mappings":"AAAA,SACCA,eADD,EAECC,0BAFD,EAGCC,yBAHD,QAIO,sBAJP;AAKA,SACCC,eADD,EAECC,oBAFD,EAGCC,qBAHD,QAIO,sBAJP;AAKA,SAAQC,mBAAR,QAAkC,4BAAlC;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACxC,SAAQC,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAACH,qBAAqB,CAAC,IAAD,CAAtB,CAAR;AACAG,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACAQ,IAAAA,QAAQ,CAACJ,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACAI,IAAAA,QAAQ,CAACL,eAAe,CAAC;AAACM,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAhB,CAAR;AACA,GALD;AAMA,CAPM;AASP,OAAO,MAAMC,iBAAiB,GAAG,QAAqB;AAAA,MAApB;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAoB;AACrD,SAAQJ,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAACH,qBAAqB,CAAC,IAAD,CAAtB,CAAR;;AACA,QAAI,CAACO,KAAK,CAACC,UAAN,GAAmB,CAApB,IAAyBD,KAAK,CAACE,UAA/B,KAA8C,CAAlD,EAAqD;AACpDN,MAAAA,QAAQ,CAACJ,oBAAoB,CAAC,CAACO,MAAM,CAACI,WAAT,CAArB,CAAR;AACAP,MAAAA,QAAQ,CAACN,yBAAyB,EAA1B,CAAR;AACAM,MAAAA,QAAQ,CAACF,mBAAmB,CAAC,CAAD,CAApB,CAAR;AACA;AACA,KALD,MAKOE,QAAQ,CAACJ,oBAAoB,CAAC,CAACO,MAAM,CAACI,WAAT,CAArB,CAAR;;AACPP,IAAAA,QAAQ,CAACP,0BAA0B,EAA3B,CAAR;AACAO,IAAAA,QAAQ,CAACF,mBAAmB,CAAC,CAAD,CAApB,CAAR;AACA;AACA,GAXD;AAYA,CAbM;AAeP,OAAO,MAAMU,UAAU,GAAG,MAAM;AAC/B,SAAQR,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAACL,eAAe,CAAC;AAACM,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAhB,CAAR;AACAD,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACA,GAHD;AAIA,CALM;AAOP,OAAO,MAAMiB,UAAU,GAAG,SAAa;AAAA,MAAZ;AAACL,IAAAA;AAAD,GAAY;AACtC,SAAQJ,QAAD,IAAc;AACpB,QAAII,KAAK,CAACC,UAAN,GAAmBD,KAAK,CAACE,UAAzB,KAAwC,CAA5C,EAA+C;AAC9CN,MAAAA,QAAQ,CAACN,yBAAyB,EAA1B,CAAR;AACA,KAFD,MAEOM,QAAQ,CAACP,0BAA0B,EAA3B,CAAR;AACP,GAJD;AAKA,CANM","sourcesContent":["import {\r\n\tresetTimeAction,\r\n\tresetLittlePauseTimeAction,\r\n\tresetLargePauseTimeAction,\r\n} from \"../store/timeReducer\";\r\nimport {\r\n\tsetStatusAction,\r\n\tsetLittlePauseAction,\r\n\tsetReloadStatusAction,\r\n} from \"../store/timerStatus\";\r\nimport {addTotalCountAction} from \"../store/totalCountReducer\";\r\n\r\nexport const defaultTimerSetting = () => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch(setReloadStatusAction(true));\r\n\t\tdispatch(resetTimeAction());\r\n\t\tdispatch(setLittlePauseAction(false));\r\n\t\tdispatch(setStatusAction({play: true}));\r\n\t};\r\n};\r\n\r\nexport const timerPauseSetting = ({status, count}) => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch(setReloadStatusAction(true));\r\n\t\tif ((count.totalCount + 1) % count.roundCount === 0) {\r\n\t\t\tdispatch(setLittlePauseAction(!status.littlePause));\r\n\t\t\tdispatch(resetLargePauseTimeAction());\r\n\t\t\tdispatch(addTotalCountAction(1));\r\n\t\t\treturn;\r\n\t\t} else dispatch(setLittlePauseAction(!status.littlePause));\r\n\t\tdispatch(resetLittlePauseTimeAction());\r\n\t\tdispatch(addTotalCountAction(1));\r\n\t\treturn;\r\n\t};\r\n};\r\n\r\nexport const resetRound = () => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch(setStatusAction({play: false}));\r\n\t\tdispatch(resetTimeAction());\r\n\t};\r\n};\r\n\r\nexport const resetPause = ({count}) => {\r\n\treturn (dispatch) => {\r\n\t\tif (count.totalCount % count.roundCount === 0) {\r\n\t\t\tdispatch(resetLargePauseTimeAction());\r\n\t\t} else dispatch(resetLittlePauseTimeAction());\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}