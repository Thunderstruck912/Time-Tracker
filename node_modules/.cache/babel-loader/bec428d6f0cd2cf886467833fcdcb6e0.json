{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bouku\\\\Desktop\\\\Time Tracker\\\\time-tracker\\\\src\\\\components\\\\main.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { setTimeAction, resetTimeAction } from '../store/timeReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst date = new Date(150000);\nconst minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\nconsole.log(minutes);\n\nconst Main = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const time1 = useSelector(state => state.time);\n  const [time, setTime] = useState({\n    minutes: 25,\n    seconds: 0\n  });\n  const [pause, setPause] = useState({\n    minutes: 0,\n    seconds: 30\n  });\n  const [active, setActive] = useState(false);\n  const [interv, setInterv] = useState();\n  const [totalCount, setTotalCount] = useState(null);\n  let updateMin = time.minutes,\n      updateSec = time.seconds;\n\n  const T = () => {\n    dispatch(setTimeAction({\n      value1: 10,\n      value2: 20\n    }));\n    console.log(updateM, updateS);\n  };\n\n  let updateM = time1.minutes,\n      updateS = time1.seconds;\n\n  const tracer = () => {\n    setInterval(setTracer, 1000);\n  };\n\n  const setTracer = () => {\n    if (updateS === 0) {\n      updateS = 60;\n      updateMin--;\n    }\n\n    updateS--;\n    return dispatch(setTimeAction({\n      value1: updateM,\n      value2: updateS\n    }));\n  };\n\n  tracer();\n\n  const timer = () => {\n    setActive(!active);\n    run();\n\n    if (!active) {\n      setInterv(setInterval(run, 1));\n      clearInterval(interv);\n    } else {\n      clearInterval(interv);\n    }\n  };\n\n  const run = () => {\n    if (updateMin === 0 && updateSec === 1) {\n      setTotalCount(totalCount + 1);\n      setTime(pause);\n      setActive(false);\n      return;\n    }\n\n    if (updateSec === 0) {\n      updateSec = 60;\n      updateMin--;\n    }\n\n    updateSec--;\n    return setTime({\n      minutes: updateMin,\n      seconds: updateSec\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: time.minutes >= 10 ? time.minutes : '0' + time.minutes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: time.seconds >= 10 ? time.seconds : '0' + time.seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: timer,\n        value: \"\\u0437\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0442\\u0430\\u0439\\u043C\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: T,\n        children: \"____1___\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Main, \"qIV/BYTc3HkN2Nca9AA/EHOl1Qc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/components/main.jsx"],"names":["React","useState","useEffect","setTimeAction","resetTimeAction","useDispatch","useSelector","date","Date","minutes","getMinutes","console","log","Main","dispatch","time1","state","time","setTime","seconds","pause","setPause","active","setActive","interv","setInterv","totalCount","setTotalCount","updateMin","updateSec","T","value1","value2","updateM","updateS","tracer","setInterval","setTracer","timer","run","clearInterval"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {setTimeAction,resetTimeAction} from '../store/timeReducer'\r\nimport { useDispatch,useSelector } from 'react-redux';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst date = new Date(150000)\r\nconst minutes = date.getMinutes()<10? '0'+date.getMinutes():date.getMinutes()\r\nconsole.log(minutes)\r\n\r\n\r\n\r\nconst Main = () => {\r\n  const dispatch=useDispatch()\r\n    const time1 = useSelector((state)=>state.time)\r\n\r\n    \r\n\r\n\r\n  const[time,setTime]=useState({minutes:25 ,seconds:0})\r\n  const[pause,setPause] = useState({minutes:0 ,seconds:30})\r\n  const[active,setActive]=useState(false)\r\n  const [interv,setInterv]=useState()\r\n  const [totalCount,setTotalCount]=useState(null)\r\n\r\n\r\n  let updateMin= time.minutes, updateSec=time.seconds  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const T=()=>{\r\n    dispatch(setTimeAction({value1:10,value2:20}))\r\n    console.log(updateM, updateS)\r\n  }\r\n\r\n  let updateM= time1.minutes, updateS=time1.seconds  \r\n \r\n  const tracer=()=>{\r\n    setInterval(setTracer,1000)\r\n  }\r\n\r\n  const setTracer=()=>{\r\n    if(updateS===0){\r\n      updateS=60\r\n      updateMin--\r\n    }\r\n    updateS--\r\n    return dispatch(setTimeAction({value1:updateM,value2:updateS}))\r\n  }\r\n\r\n  \r\ntracer()\r\n\r\n  const timer=()=>{\r\n    setActive(!active)\r\n    run()\r\n    if(!active){\r\n      setInterv(setInterval(run,1))\r\n      clearInterval(interv)\r\n    } else {\r\n      clearInterval(interv)\r\n    }\r\n  } \r\n\r\n  const run = ()=>{\r\n    if(updateMin===0&&updateSec===1) {\r\n      setTotalCount(totalCount+1)\r\n      setTime(pause)\r\n      setActive(false)\r\n      return        \r\n    } \r\n    if(updateSec===0){\r\n      updateSec=60\r\n      updateMin--;\r\n    }\r\n    updateSec--\r\n    return setTime({minutes:updateMin,seconds:updateSec})\r\n  }\r\n\r\n\r\n  return <div>\r\n\r\n    <div>\r\n      <span>{time.minutes>=10?time.minutes:'0'+time.minutes}</span>:\r\n      <span>{time.seconds>=10?time.seconds:'0'+time.seconds}</span>\r\n    </div>\r\n\r\n    <div>\r\n      <input type=\"button\" onClick={timer} value='запустить таймер'/>\r\n      <div onClick={T}>____1___</div>\r\n      </div>\r\n  </div>;\r\n};\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}