{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bouku\\\\Desktop\\\\Time Tracker\\\\time-tracker\\\\src\\\\components\\\\main.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { setTimeAction, resetTimeAction } from '../store/timeReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Timer from './Timer/Timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst date = new Date(150000);\nconst minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\nconsole.log(minutes);\n\nconst Main = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const time1 = useSelector(state => state.time);\n  const [time, setTime] = useState({\n    minutes: 25,\n    seconds: 0\n  });\n  const [pause, setPause] = useState({\n    minutes: 0,\n    seconds: 30\n  });\n  const [active, setActive] = useState(false);\n  const [interv, setInterv] = useState();\n  const [totalCount, setTotalCount] = useState(null);\n  let updateMin = time.minutes,\n      updateSec = time.seconds;\n  let updateM = time1.minutes,\n      updateS = time1.seconds;\n\n  const tracer = () => {\n    setTracer();\n    setInterval(setTracer, 100);\n  };\n\n  const setTracer = () => {\n    if (updateS === 0) {\n      updateS = 60;\n      updateM--;\n    }\n\n    updateS--;\n    return dispatch(setTimeAction({\n      value1: updateM,\n      value2: updateS\n    }));\n  };\n\n  const timer = () => {\n    setActive(!active);\n    run();\n\n    if (!active) {\n      setInterv(setInterval(run, 1));\n      clearInterval(interv);\n    } else {\n      clearInterval(interv);\n    }\n  };\n\n  const run = () => {\n    if (updateMin === 0 && updateSec === 1) {\n      setTotalCount(totalCount + 1);\n      setTime(pause);\n      setActive(false);\n      return;\n    }\n\n    if (updateSec === 0) {\n      updateSec = 60;\n      updateMin--;\n    }\n\n    updateSec--;\n    return setTime({\n      minutes: updateMin,\n      seconds: updateSec\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Timer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 11\n  }, this);\n};\n\n_s(Main, \"qIV/BYTc3HkN2Nca9AA/EHOl1Qc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/components/main.jsx"],"names":["React","useState","useEffect","setTimeAction","resetTimeAction","useDispatch","useSelector","Timer","date","Date","minutes","getMinutes","console","log","Main","dispatch","time1","state","time","setTime","seconds","pause","setPause","active","setActive","interv","setInterv","totalCount","setTotalCount","updateMin","updateSec","updateM","updateS","tracer","setTracer","setInterval","value1","value2","timer","run","clearInterval"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {setTimeAction,resetTimeAction} from '../store/timeReducer'\r\nimport { useDispatch,useSelector } from 'react-redux';\r\n\r\nimport Timer from './Timer/Timer';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst date = new Date(150000)\r\nconst minutes = date.getMinutes()<10? '0'+date.getMinutes():date.getMinutes()\r\nconsole.log(minutes)\r\n\r\n\r\n\r\nconst Main = () => {\r\n  const dispatch=useDispatch()\r\n    const time1 = useSelector((state)=>state.time)\r\n\r\n    \r\n\r\n\r\n  const[time,setTime]=useState({minutes:25 ,seconds:0})\r\n  const[pause,setPause] = useState({minutes:0 ,seconds:30})\r\n  const[active,setActive]=useState(false)\r\n  const [interv,setInterv]=useState()\r\n  const [totalCount,setTotalCount]=useState(null)\r\n\r\n\r\n  let updateMin= time.minutes, updateSec=time.seconds  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  let updateM= time1.minutes, updateS=time1.seconds  \r\n \r\n  const tracer=()=>{\r\n    setTracer()\r\n    setInterval(setTracer,100)\r\n  }\r\n\r\n  const setTracer=()=>{\r\n    if(updateS===0){\r\n      updateS=60\r\n      updateM--\r\n    }\r\n    updateS--\r\n    return dispatch(setTimeAction({value1:updateM,value2:updateS}))\r\n  }\r\n\r\n  \r\n\r\n\r\n  const timer=()=>{\r\n    setActive(!active)\r\n    run()\r\n    if(!active){\r\n      setInterv(setInterval(run,1))\r\n      clearInterval(interv)\r\n    } else {\r\n      clearInterval(interv)\r\n    }\r\n  } \r\n\r\n  const run = ()=>{\r\n    if(updateMin===0&&updateSec===1) {\r\n      setTotalCount(totalCount+1)\r\n      setTime(pause)\r\n      setActive(false)\r\n      return        \r\n    } \r\n    if(updateSec===0){\r\n      updateSec=60\r\n      updateMin--;\r\n    }\r\n    updateSec--\r\n    return setTime({minutes:updateMin,seconds:updateSec})\r\n  }\r\n\r\n\r\n  return (<div>\r\n    <Timer/>\r\n    <div>\r\n\r\n      </div>\r\n  </div>);\r\n};\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}