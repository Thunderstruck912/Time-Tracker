{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bouku\\\\Desktop\\\\Time Tracker\\\\time-tracker\\\\src\\\\components\\\\NavContentSetting\\\\NavSettingTimer\\\\defaultSoundSetting.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setSoundStatusAction } from '../../../store/timerStatus';\nimport RadioInputSetting from '../../../UI/RadioInputSetting/RadioInputSetting';\nimport useSound from 'use-sound';\nimport swipeSound from './sound/bell.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DefaultSoundSetting = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const status = useSelector(state => state.status);\n\n  const swipeInput = () => {\n    dispatch(setSoundStatusAction(!status.sound));\n  };\n\n  const st = () => {\n    if (status.sound) return swipeSound, {\n      volume: 0.4\n    };else return swipeSound, {\n      volume: 0\n    };\n  };\n\n  const [playActive] = useSound(st() // swipeSound,\n  // { volume: 0.4 }\n  );\n  useEffect(() => {}, [status.littlePause]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: st\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(RadioInputSetting, {\n      tittle: props.tittle,\n      swipe: swipeInput,\n      status: status.sound,\n      value_on: 'Вкл',\n      value_off: 'Выкл'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DefaultSoundSetting, \"/X9D6JQvh4+Au8NUqe6Z4PoFpsg=\", false, function () {\n  return [useDispatch, useSelector, useSound];\n});\n\n_c = DefaultSoundSetting;\nexport default DefaultSoundSetting;\n\nvar _c;\n\n$RefreshReg$(_c, \"DefaultSoundSetting\");","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/components/NavContentSetting/NavSettingTimer/defaultSoundSetting.jsx"],"names":["React","useEffect","useState","useSelector","useDispatch","setSoundStatusAction","RadioInputSetting","useSound","swipeSound","DefaultSoundSetting","props","dispatch","status","state","swipeInput","sound","st","volume","playActive","littlePause","tittle"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,SAAQC,oBAAR,QAAmC,4BAAnC;AACA,OAAOC,iBAAP,MAA8B,iDAA9B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAMC,QAAQ,GAAEP,WAAW,EAA3B;AACA,QAAMQ,MAAM,GAACT,WAAW,CAAEU,KAAD,IAASA,KAAK,CAACD,MAAhB,CAAxB;;AAEA,QAAME,UAAU,GAAE,MAAI;AACpBH,IAAAA,QAAQ,CAACN,oBAAoB,CAAC,CAACO,MAAM,CAACG,KAAT,CAArB,CAAR;AACD,GAFD;;AAIF,QAAMC,EAAE,GAAE,MAAI;AACZ,QAAGJ,MAAM,CAACG,KAAV,EAAgB,OAAOP,UAAU,EAAC;AAAES,MAAAA,MAAM,EAAE;AAAV,KAAlB,CAAhB,KACK,OAAOT,UAAU,EAAC;AAAES,MAAAA,MAAM,EAAE;AAAV,KAAlB;AACN,GAHD;;AAKI,QAAM,CAACC,UAAD,IAAeX,QAAQ,CAC3BS,EAAE,EADyB,CAEzB;AACA;AAHyB,GAA7B;AAOEf,EAAAA,SAAS,CAAC,MAAI,CAMb,CANQ,EAMP,CAACW,MAAM,CAACO,WAAR,CANO,CAAT;AAQJ,sBACE;AAAA,4BACA;AAAQ,MAAA,OAAO,EAAEH;AAAjB;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,iBAAD;AACE,MAAA,MAAM,EAAEN,KAAK,CAACU,MADhB;AAEE,MAAA,KAAK,EAAEN,UAFT;AAGE,MAAA,MAAM,EAAEF,MAAM,CAACG,KAHjB;AAIE,MAAA,QAAQ,EAAE,KAJZ;AAKE,MAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA,kBADF;AAYD,CAxCD;;GAAMN,mB;UACYL,W,EACHD,W,EAWUI,Q;;;KAbnBE,mB;AA0CN,eAAeA,mBAAf","sourcesContent":["import React,{useEffect,useState} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {setSoundStatusAction} from '../../../store/timerStatus'\r\nimport RadioInputSetting from '../../../UI/RadioInputSetting/RadioInputSetting';\r\nimport useSound from 'use-sound';\r\nimport swipeSound from './sound/bell.mp3'\r\n\r\nconst DefaultSoundSetting = (props) => {\r\n  const dispatch= useDispatch()\r\n  const status=useSelector((state)=>state.status)\r\n\r\n  const swipeInput =()=>{\r\n    dispatch(setSoundStatusAction(!status.sound))\r\n  }\r\n\r\nconst st =()=>{\r\n  if(status.sound)return swipeSound,{ volume: 0.4 }\r\n  else return swipeSound,{ volume: 0 }\r\n}\r\n\r\n    const [playActive] = useSound(\r\n      st()\r\n        // swipeSound,\r\n        // { volume: 0.4 }\r\n  \r\n    );\r\n\r\n      useEffect(()=>{\r\n\r\n\r\n\r\n\r\n\r\n      },[status.littlePause])\r\n\r\n  return (\r\n    <>\r\n    <button onClick={st}></button>\r\n    <RadioInputSetting\r\n      tittle={props.tittle}\r\n      swipe={swipeInput} \r\n      status={status.sound}\r\n      value_on={'Вкл'}\r\n      value_off={'Выкл'}\r\n      />\r\n      </>\r\n  );\r\n};\r\n\r\nexport default DefaultSoundSetting;\r\n"]},"metadata":{},"sourceType":"module"}