{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bouku\\\\Desktop\\\\Time Tracker\\\\time-tracker\\\\src\\\\components\\\\NavContentSetting\\\\NavSettingTimer\\\\defaultCountSetting.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addDefaultCountAction, removeDefaultCountAction, setDefaultCountAction } from '../../../store/totalCountReducer';\nimport InputSetting from '../../../UI/InputSetting/InputSetting';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DefaultCountSetting = props => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const dispatch = useDispatch();\n  const count = useSelector(state => state.totalCount); // useEffect(() =>{\n  //   if(localStorage.getItem('SETTING:DEFAULT_COUNT')) dispatch(setDefaultCountAction(+localStorage.getItem('SETTING:DEFAULT_COUNT')))\n  // },[])\n  // useEffect(() =>{\n  //   localStorage.setItem('SETTING:DEFAULT_COUNT',count.defaultCount)\n  // },[count.defaultCount])\n\n  const [name, setName] = useLocalStorage('SETTING:DEFAULT_COUNT', count.defaultCount); // ========================================\n\n  function useLocalStorage(key, initialValue) {\n    _s();\n\n    // состояние для хранения значения\n    // передаем функцию инициализации useState для однократного выполнения\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // получаем значение из локального хранилища по ключу\n        const item = window.localStorage.getItem(key); // разбираем полученное значение или возвращаем initialValue\n\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // если возникла ошибка, также возвращаем начальное значение\n        console.error(error);\n        return initialValue;\n      }\n    }); // возвращаем обернутую версию сеттера useState,\n    // которая помещает новое значение в локальное хранилище\n\n    const setValue = value => {\n      try {\n        // значение может быть функцией\n        const valueToStore = value instanceof Function ? value(storedValue) : value; // сохраняем состояние\n\n        setStoredValue(valueToStore); // помещаем его в локальное хранилище\n\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // более продвинутая реализация может предполагать обработку ошибок в зависимости от вида ошибки\n        console.error(error);\n      }\n    };\n\n    return [storedValue, setValue];\n  } // ========================================\n\n\n  _s(useLocalStorage, \"BKQG20rnhxdhuMQnRqYJtRs1Xpo=\");\n\n  const addDefaultCount = () => {\n    if (count.defaultCount < 24) dispatch(addDefaultCountAction(1));\n  };\n\n  const removeDefaultCount = () => {\n    if (count.defaultCount > 1) dispatch(removeDefaultCountAction(1));\n  };\n\n  return /*#__PURE__*/_jsxDEV(InputSetting, {\n    add: addDefaultCount,\n    remove: removeDefaultCount,\n    value: count.defaultCount,\n    tittle: props.tittle,\n    count: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(DefaultCountSetting, \"Y+j1brAnNc9m40HgOWLxIdJzEd4=\", true, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DefaultCountSetting;\nexport default DefaultCountSetting;\n\nvar _c;\n\n$RefreshReg$(_c, \"DefaultCountSetting\");","map":{"version":3,"sources":["C:/Users/bouku/Desktop/Time Tracker/time-tracker/src/components/NavContentSetting/NavSettingTimer/defaultCountSetting.jsx"],"names":["React","useEffect","useState","useSelector","useDispatch","addDefaultCountAction","removeDefaultCountAction","setDefaultCountAction","InputSetting","DefaultCountSetting","props","dispatch","count","state","totalCount","name","setName","useLocalStorage","defaultCount","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify","addDefaultCount","removeDefaultCount","tittle"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AAEA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,SAAQC,qBAAR,EAA8BC,wBAA9B,EAAuDC,qBAAvD,QAAmF,kCAAnF;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAAA;;AACrC,QAAMC,QAAQ,GAAEP,WAAW,EAA3B;AACA,QAAMQ,KAAK,GAACT,WAAW,CAAEU,KAAD,IAASA,KAAK,CAACC,UAAhB,CAAvB,CAFqC,CAIrC;AACA;AACA;AAEA;AACA;AACA;;AAKA,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAgBC,eAAe,CAAC,uBAAD,EAAyBL,KAAK,CAACM,YAA/B,CAArC,CAfqC,CAgBrC;;AACA,WAASD,eAAT,CAAyBE,GAAzB,EAA8BC,YAA9B,EAA4C;AAAA;;AAC1C;AACA;AACA,UAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,MAAM;AACnD,UAAI;AACF;AACA,cAAMqB,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFE,CAGF;;AACA,eAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACD,OALD,CAKE,OAAOS,KAAP,EAAc;AACd;AACAC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,eAAOT,YAAP;AACD;AACF,KAX6C,CAA9C,CAH0C,CAgB1C;AACA;;AACA,UAAMW,QAAQ,GAAIC,KAAD,IAAW;AAC1B,UAAI;AACF;AACA,cAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACX,WAAD,CAAjC,GAAiDW,KADnD,CAFE,CAIF;;AACAV,QAAAA,cAAc,CAACW,YAAD,CAAd,CALE,CAMF;;AACAT,QAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4BhB,GAA5B,EAAiCQ,IAAI,CAACS,SAAL,CAAeH,YAAf,CAAjC;AACD,OARD,CAQE,OAAOJ,KAAP,EAAc;AACd;AACAC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KAbD;;AAeA,WAAO,CAACR,WAAD,EAAcU,QAAd,CAAP;AACD,GAnDoC,CAqDrC;;;AArDqC,KAiB5Bd,eAjB4B;;AAmErC,QAAMoB,eAAe,GAAC,MAAI;AACxB,QAAGzB,KAAK,CAACM,YAAN,GAAmB,EAAtB,EAA0BP,QAAQ,CAACN,qBAAqB,CAAC,CAAD,CAAtB,CAAR;AAC3B,GAFD;;AAGA,QAAMiC,kBAAkB,GAAC,MAAI;AAC3B,QAAG1B,KAAK,CAACM,YAAN,GAAmB,CAAtB,EAA0BP,QAAQ,CAACL,wBAAwB,CAAC,CAAD,CAAzB,CAAR;AAC3B,GAFD;;AAGA,sBACE,QAAC,YAAD;AACA,IAAA,GAAG,EAAE+B,eADL;AAEA,IAAA,MAAM,EAAEC,kBAFR;AAGA,IAAA,KAAK,EAAE1B,KAAK,CAACM,YAHb;AAIA,IAAA,MAAM,EAAER,KAAK,CAAC6B,MAJd;AAKA,IAAA,KAAK,EAAE;AALP;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAjFD;;IAAM9B,mB;UACYL,W,EACJD,W;;;KAFRM,mB;AAmFN,eAAeA,mBAAf","sourcesContent":["import React,{useEffect,useState} from 'react';\r\n\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {addDefaultCountAction,removeDefaultCountAction,setDefaultCountAction} from '../../../store/totalCountReducer'\r\nimport InputSetting from '../../../UI/InputSetting/InputSetting';\r\n\r\nconst DefaultCountSetting = (props) => {\r\n  const dispatch= useDispatch()\r\n  const count=useSelector((state)=>state.totalCount)\r\n\r\n  // useEffect(() =>{\r\n  //   if(localStorage.getItem('SETTING:DEFAULT_COUNT')) dispatch(setDefaultCountAction(+localStorage.getItem('SETTING:DEFAULT_COUNT')))\r\n  // },[])\r\n  \r\n  // useEffect(() =>{\r\n  //   localStorage.setItem('SETTING:DEFAULT_COUNT',count.defaultCount)\r\n  // },[count.defaultCount])\r\n\r\n\r\n\r\n\r\n  const [name,setName]= useLocalStorage('SETTING:DEFAULT_COUNT',count.defaultCount)\r\n  // ========================================\r\n  function useLocalStorage(key, initialValue) {\r\n    // состояние для хранения значения\r\n    // передаем функцию инициализации useState для однократного выполнения\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {\r\n        // получаем значение из локального хранилища по ключу\r\n        const item = window.localStorage.getItem(key);\r\n        // разбираем полученное значение или возвращаем initialValue\r\n        return item ? JSON.parse(item) : initialValue;\r\n      } catch (error) {\r\n        // если возникла ошибка, также возвращаем начальное значение\r\n        console.error(error);\r\n        return initialValue;\r\n      }\r\n    });\r\n  \r\n    // возвращаем обернутую версию сеттера useState,\r\n    // которая помещает новое значение в локальное хранилище\r\n    const setValue = (value) => {\r\n      try {\r\n        // значение может быть функцией\r\n        const valueToStore =\r\n          value instanceof Function ? value(storedValue) : value;\r\n        // сохраняем состояние\r\n        setStoredValue(valueToStore);\r\n        // помещаем его в локальное хранилище\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      } catch (error) {\r\n        // более продвинутая реализация может предполагать обработку ошибок в зависимости от вида ошибки\r\n        console.error(error);\r\n      }\r\n    };\r\n  \r\n    return [storedValue, setValue];\r\n  }\r\n\r\n  // ========================================\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  const addDefaultCount=()=>{\r\n    if(count.defaultCount<24) dispatch(addDefaultCountAction(1))\r\n  }\r\n  const removeDefaultCount=()=>{\r\n    if(count.defaultCount>1)  dispatch(removeDefaultCountAction(1))\r\n  }\r\n  return (\r\n    <InputSetting \r\n    add={addDefaultCount} \r\n    remove={removeDefaultCount} \r\n    value={count.defaultCount} \r\n    tittle={props.tittle}\r\n    count={true}/>\r\n  )\r\n};\r\n\r\nexport default DefaultCountSetting;\r\n"]},"metadata":{},"sourceType":"module"}